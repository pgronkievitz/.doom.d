#+TITLE:   pgronkievitz's configuration of /*DOOM*/
#+subtitle: Doom guy would be proud
#+startup: inlineimages nofold
#+language: en
#+author: Patryk Gronkiewicz
#+html_head: <link rel='shortcut icon' type='image/png' href='https://www.gnu.org/software/emacs/favicon.png'>
#+property: header-args:elisp :exports code
#+embed: LICENSE :description MIT lincese file
#+startup: fold
#+latex_class: book
#+options: coverpage:yes

[[https://img.shields.io/badge/Emacs-DOOM-blueviolet.svg?logo=gnuemacs&style=flat-square]][[https://img.shields.io/badge/unstable-blue.svg?logo=nixos&logoColor=white&label=NixOS&style=flat-square]]
#+begin_quote
Talk is cheap - show me the code --- Linus Torvalds
#+end_quote

* Introduction
Behold newcomers! This configuration is made by a total elisp noob and comes with no warranty to work. Those configurations might be broken in some places, but with mitigation on NixOS's side. Please refer to [[https://gitlab.com/pgronkievitz/nixos-configurations][my system configuration]] before reaching out.

This configuration is strongly inspired by [[https://tecosaur.github.io/emacs-config/config.html][TEC's config]], but as everyone can see --- it's not as extensive (yet).
* Misc
** Completions
Vertico & Company is best of its kind match for me, but I can't wait for Cape implementation in Doom.
#+name: completion
#+begin_src elisp :noweb yes
:completion
    (company
    +childframe)
    (vertico +icons)
#+end_src
** Doom features
Just basic packages for helper functions, dashboard and preventing me from leaving.
#+name: doomfeatui
#+begin_src elisp
doom                ; what makes DOOM look the way it does
doom-dashboard      ; a nifty splash screen for Emacs
doom-quit           ; DOOM quit-message prompts when you quit Emacs
#+end_src
** Dev features
As all things should be - fill column and indent guides are lifesavers when writing in Python.
#+name: devfeatui
#+begin_src elisp
fill-column
indent-guides       ; highlighted indent columns
vc-gutter           ; vcs diff in the fringe
#+end_src
** Visual nicities
#+name: nicevisui
#+begin_src elisp :noweb yes :exports none
<<nicecode>>
<<vimificationvis>>
<<othervis>>
#+end_src
OOH, SHINY!
#+name: nicecode
#+begin_src elisp
hl-todo             ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
(ligatures +extra)  ; ligatures and symbols to make your code pretty again
#+end_src
I feel like it's more vim-thing, but I still like it.
#+name: vimificationvis
#+begin_src elisp
vi-tilde-fringe     ; fringe tildes to mark beyond EOB
(modeline +light)            ; snazzy, Atom-inspired modeline, plus API
#+end_src
Give that man some smileys!
#+name: othervis
#+begin_src elisp
(emoji +github +unicode)
ophints             ; highlight the region an operation acts on
(popup +all)        ; tame sudden yet inevitable temporary windows
zen                 ; distraction-free coding or writing
#+end_src
** Making DOOM a proper IDE
I don't use treemacs much, but it's nice for checking project structure.
#+name: ideui
#+begin_src elisp
(treemacs +lsp)              ; a project drawer, like neotree but cooler
#+end_src
** Ergonomics
#+name: ergonomicsui
#+begin_src elisp
(window-select +numbers)     ; visually switch windows
workspaces          ; tab emulation, persistence & separate workspaces
#+end_src
Make my pinkies +suffer+ happy
#+name: ergonomicseditor
#+begin_src elisp
(evil +everywhere)       ; come to the dark side, we have cookies
#+end_src
** UI
#+name: ui
#+begin_src elisp :noweb yes
:ui
    <<doomfeatui>>
    <<nicevisui>>
    <<devfeatui>>
    <<ideui>>
    <<ergonomicsui>>
#+end_src
** Editor
#+name: editor
#+begin_src elisp :noweb yes
:editor
    <<ergonomicseditor>>
    file-templates      ; auto-snippets for empty files
    fold                ; (nigh) universal code folding
    (format
    +onsave)           ; automated prettiness
    rotate-text       ; cycle region at point between text candidates
    snippets            ; my elves. They type so I don't have to
    word-wrap           ; soft wrapping with language-aware indent
#+end_src
** Emacs
#+name: emacs
#+begin_src elisp
:emacs
    (dired
    +icons
    +ranger)         ; making dired pretty [functional]
    electric          ; smarter, keyword-based electric-indent
    (ibuffer +icons)         ; interactive buffer management
    (undo
    +tree)           ; persistent, smarter undo for your inevitable mistakes
    vc                ; version-control and Emacs, sitting in a tree
#+end_src
** Terminal
Who needs anything else?
#+name: terminal
#+begin_src elisp
:term
    vterm               ; the best terminal emulation in Emacs
#+end_src
** Checking
Yuo cen't bee rong
#+name: checkers
#+begin_src elisp
:checkers
    (syntax +childframe)     ; tasing you for every semicolon you forget
    (spell +flyspell +hunspell)        ; tasing you for misspelling mispelling
    grammar           ; tasing grammar mistake every you make
#+end_src
** Tools
#+name: tools
#+begin_src elisp
:tools
    ;;ansible
    biblio
    debugger          ; FIXME stepping through code, to help you add bugs
    direnv
    (docker +lsp)
    editorconfig        ; let someone else argue about tabs vs spaces
    ein                 ; tame Jupyter notebooks with emacs
    (eval +overlay)     ; run code, run (also, repls)
    (lookup
    +offline
    +dictionary
    +docsets)           ; navigate your code and its documentation
    (lsp +peek)
    (magit
    +forge)            ; a git porcelain for Emacs
    make                ; run make tasks from Emacs
    pdf                 ; pdf enhancements
    rgb                 ; creating color strings
    terraform         ; infrastructure as code
    upload              ; map local to remote projects via ssh/ftp
#+end_src
** OS
#+name: os
#+begin_src elisp
:os
    tty               ; improve the terminal Emacs experience
#+end_src
** Languages
#+name: languages
#+begin_src elisp
:lang
    beancount         ; mind the GAAP
    ;;(cc
    ;; +lsp)               ; C > C++ == 1
    (csharp +lsp +dotnet)            ; unity, .NET, and mono shenanigans
    data                ; config/data formats
    emacs-lisp          ; drown in parentheses
    (ess +lsp)               ; emacs speaks statistics
    (go +lsp)         ; the hipster dialect
    (json
    +lsp)              ; At least it ain't XML
    ;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
    (latex
    +latexmk
    +cdlatex)           ; writing papers in Emacs has never been so fun
    (lua +lsp)               ; one-based indices? one-based indices
    (markdown)
    nix                 ; I hereby declare "nix geht mehr!"
    (org
    +dragndrop
    +gnuplot
    +pandoc
    +pomodoro
    +present
    +pretty
    +hugo
    +noter
    +roam2)              ; organize your plain life in plain text
    plantuml            ; diagrams for confusing people more
    (python
    +lsp
    +pyright)             ; beautiful is better than ugly
    rest              ; Emacs as a REST client
    rst               ; ReST in peace
    ;;(rust
    ;;+lsp)              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
    sh                ; she sells {ba,z,fi}sh shells on the C xor
    web               ; the tubes
    (yaml
    +lsp)              ; JSON, but readable
#+end_src
** Email
#+name: email
#+begin_src elisp
:email
    (mu4e +org)
#+end_src
** App
#+name: app
#+begin_src elisp
:app
    calendar
    irc               ; how neckbeards socialize
    rss        ; emacs as an RSS reader
#+end_src
** Config
#+name: config
#+begin_src elisp
:config
    (default +bindings +smartparens)
#+end_src
* ~init.el~ file
#+begin_src elisp :tangle init.el :noweb yes
(doom!
       <<completion>>
       <<ui>>
       <<editor>>
       <<emacs>>
       <<terminal>>
       <<checkers>>
       <<tools>>
       <<os>>
       <<languages>>
       <<email>>
       <<app>>
       <<config>>
)
#+end_src

* Packages
#+begin_src elisp :tangle packages.el :noweb yes
<<orgpkgs>>
<<protopkgs>>
<<writingpkgs>>
<<themingpkgs>>
#+end_src
** Org packages
#+name: orgpkgs
#+begin_src elisp
(package! org-super-agenda)
(package! org-pretty-table :recipe (:host github :repo "Fuco1/org-pretty-table"))
(package! org-fragtog)
(package! org-appear :recipe (:host github :repo "awth13/org-appear"))
(package! org-pretty-tags)
(package! org-ol-tree :recipe (:host github :repo "Townk/org-ol-tree"))
(package! laas :recipe (:host github :repo "tecosaur/LaTeX-auto-activating-snippets"))
(package! org-roam-ui :recipe (:host github :repo "org-roam/org-roam-ui" :files ("*.el" "out")))
(package! websocket)
(package! org-alert :recipe (:host github :repo "spegoraro/org-alert" :files ("*.el")))
(package! org-notifications :recipe (:host github :repo "doppelc/org-notifications" :files ("*.el" "sounds")))
(package! pretty-agenda :recipe (:host github :repo "Artawower/.doom" :files ("pretty-agenda.el")))
(package! doct :recipe (:host github :repo "progfolio/doct"))
(package! screenshot :recipe (:host github :repo "tecosaur/screenshot"))
#+end_src
** Ye olde internet
#+name: protopkgs
#+begin_src elisp
(package! elpher)
(package! elfeed-protocol)
#+end_src
** Writing in general
#+name: writingpkgs
#+begin_src elisp
(package! guess-language)
#+end_src
** Theming
#+name: themingpkgs
#+begin_src elisp
(unpin! doom-themes)
#+end_src
* Configuration
I want to use different email address depending on what system I'm using. ~patryk@gronkiewicz.dev~ as my general-purpose email and ~patryk.gronkiewicz@omniscopy.com~ for work purposes.
#+name: identity
#+begin_src elisp
(setq user-full-name "Patryk Gronkiewicz")
(if (eq (system-name) "themis")
    (setq user-mail-address "patryk.gronkiewicz@omniscopy.com")
    (setq user-mail-address "patryk@gronkiewicz.dev"))
#+end_src

Fonts on my system always got extra bit of love.
#+name: fonts
#+begin_src elisp :noweb yes
(setq doom-font (font-spec :family "VictorMono Nerd Font" :size 14)
      doom-big-font (font-spec :family "VictorMono Nerd Font" :size 28)
      doom-variable-pitch-font (font-spec :family "Merriweather" :size 14)
      doom-serif-font (font-spec :family "UbuntuMono Nerd Font" :size 14))
<<orgfonts>>
#+end_src
I've changed styles of orgmode buffers /a bit/ to make them more pleasure to work with. I have to figure out why my code in blocks is moving a bit with my cursor, but it's good enough for now.
#+name: orgfonts
#+begin_src elisp
(custom-set-faces!
  '(org-level-1 :height 1.5)
  '(org-level-2 :height 1.4)
  '(org-level-3 :height 1.3)
  '(org-level-4 :height 1.2)
  '(org-level-5 :height 1.1)
  '(org-table :inherit 'fixed-pitch)
  '(org-document-title :inherit 'variable-pitch :height 2.0)
  '(org-inline-src-block :inherit 'fixed-pitch)
  '(org-block :inherit 'fixed-pitch)
  '(line-number :inherit 'fixed-pitch)
  '(org-code :inherit 'fixed-pitch))
#+end_src

Currently back to Nord. Also I'm a bit bored by default DOOM splash, so I've set my own.
#+name: theming
#+begin_src elisp
(setq doom-theme 'doom-nord-light)
(setq fancy-splash-image "~/Pictures/emacs.svg")
#+end_src

Calendar is not perfectly suited for me as some holiday are moved a bit and DST starts in a bit different time than in the US.
#+name: calendar
#+begin_src elisp
(setq calendar-week-start-day 1
      calendar-date-style 'iso
      calendar-christian-all-holidays-flag t)
(setq calendar-holidays
 '((holiday-fixed 1 1 "New Year's Day")
   (holiday-fixed 2 14 "Valentine's Day")
   (holiday-fixed 3 17 "St. Patrick's Day")
   (holiday-fixed 4 1 "April Fools' Day")
   (holiday-fixed 5 26 "Mother's Day")
   (holiday-fixed 5 2 "Flag Day")
   (holiday-fixed 5 3 "Constitution Day")
   (holiday-fixed 6 0 "Father's Day")
   (holiday-fixed 11 11 "Independence Day")
   (holiday-fixed 5 1 "Labor Day")
   (holiday-easter-etc)
   (holiday-fixed 12 25 "Christmas")
   (if calendar-christian-all-holidays-flag
       (append
        (holiday-fixed 1 6 "Epiphany")
        (holiday-fixed 12 24 "Christmas Eve")
        (holiday-fixed 8 15 "Assumption")
        (holiday-advent 0 "Advent")))
   (solar-equinoxes-solstices)
   (holiday-sexp calendar-daylight-savings-starts
                 (format "Daylight Saving Time Begins %s"
                         (solar-time-string
                          (/ calendar-daylight-savings-starts-time
                             (float 60))
                          calendar-standard-time-zone-name)))
   (holiday-sexp calendar-daylight-savings-ends
                 (format "Daylight Saving Time Ends %s"
                         (solar-time-string
                          (/ calendar-daylight-savings-ends-time
                             (float 60))
                          calendar-daylight-time-zone-name)))))
#+end_src
#+name: orgconf
#+begin_src elisp :noweb yes
(setq org-directory "~/Documents/notes/")
(use-package! screenshot)
(use-package! org-pretty-table
  :commands (org-pretty-table-mode global-org-pretty-table-mode))
(after! org-mode (global-org-pretty-table-mode))
(use-package! org-ol-tree
  :commands org-ol-tree)
(map! :map org-mode-map
      :after org
      :localleader
      :desc "Outline" "O" #'org-ol-tree)
(setq display-line-numbers-type 'relative)
(setq org-hidden-keywords '(title))
(setq org-startup-indented t
      org-superstar-headline-bullets-list '("◉" "◈" "○" "▷")
      org-superstar-special-todo-items t
      org-ellipsis "  "
      org-pretty-entities t
      org-hide-emphasis-markers t
      org-agenda-block-separator "~~~~~~~~~"
      org-fontify-whole-heading-line t
      org-fontify-done-headline t
      org-fontify-quote-and-verse-blocks t)
(setq
 org-pomodoro-keep-killed-pomodoro-time t)

(after! ox-hugo
  (setq org-blackfriday--org-element-string '((src-block . "Kod") (table . "Tabela") (figure . "Rysunek"))))

(use-package! websocket
  :after org-roam)
(use-package! org-roam-ui
  :after org
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))
(map! (:map org-mode-map
       :localleader
       :prefix ("m" . "org-roam")
       :desc "Open ORUI" :n "G" #'org-roam-ui-open))
;;; org-roam

;;;; create notes without entering
(defun org-roam-node-insert-immediate (arg &rest args)
  (interactive "P")
  (let ((args (cons arg args))
        (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                  '(:immediate-finish t)))))
    (apply #'org-roam-node-insert args)))
(map! :leader :desc "Create node without opening" "n r I" #'org-roam-node-insert-immediate)
;;; latex export
(setq org-latex-default-packages-alist
      '(("AUTO" "inputenc" t ("pdflatex"))
        ("T1" "fontenc" t ("pdflatex"))
        ("" "graphicx" t)
        ("" "longtable" nil)
        ("" "wrapfig" nil)
        ("" "rotating" nil)
        ("normalem" "ulem" t)
        ("" "amsmath" t)
        ("" "amssymb" t)
        ("" "amsthm" t)
        ("" "capt-of" nil)
        ("" "listings")
        ("" "color")
        ("hidelinks" "hyperref" nil)
        ("AUTO" "babel" t ("pdflatex"))
        ("AUTO" "polyglossia" t ("xelatex" "lualatex")))
      org-latex-listings t)


;;; bibliography
(defvar my/bibs '("~/Documents/biblio.bib"))
(use-package citar-org
  :no-require
  :bind ; optional
  (:map org-mode-map
        ("C-c b" . #'org-cite-insert)) ; Also bound to C-c C-x C-@
  :custom
  (org-cite-global-bibliography my/bibs)
  (org-cite-insert-processor 'citar)
  (org-cite-follow-processor 'citar)
  (org-cite-activate-processor 'citar))
;;; latexmk export
(setq org-latex-pdf-process '("latexmk -f -pdf -%latex -shell-escape -interaction=nonstopmode -output-directory=%o %f"))
;;; orgmode misc
(use-package! org-alert)
(use-package! org-ol-tree)
(use-package! org-fragtog)
(use-package laas
  :hook ((LaTeX-mode org-mode) . laas-mode)
  :config ; do whatever here
  (aas-set-snippets 'laas-mode
                    ;; set condition!
                    :cond #'texmathp ; expand only while in math
                    "supp" "\\supp"
                    "On" "O(n)"
                    "O1" "O(1)"
                    "Olog" "O(\\log n)"
                    "Olon" "O(n \\log n)"
                    ;; bind to functions!
                    "Sum" (lambda () (interactive)
                            (yas-expand-snippet "\\sum_{$1}^{$2} $0"))
                    ;; add accent snippets
                    :cond #'laas-object-on-left-condition
                    "qq" (lambda () (interactive) (laas-wrap-previous-object "sqrt"))
                    "zz" (lambda () (interactive) (laas-wrap-previous-object "mathcal"))
                    :cond #'laas-org-mathp
                    "supp" "\\supp"
                    "On" "O(n)"
                    "O1" "O(1)"
                    "Olog" "O(\\log n)"
                    "Olon" "O(n \\log n)"
                    "ooo" "\\infty"
                    "RR" "\\mathbb{R}"
                    "ZZ" "\\mathbb{Z}"
                    "NN" "\\mathbb{N}"
                    "cc" "\\subset"
                    ;; bind to functions!
                    "Sum" (lambda () (interactive)
                            (yas-expand-snippet "\\sum_{$1^{$2} $0"))))

;;; agenda
;;;;;;;;;;;;
;; AGENDA ;;
;;;;;;;;;;;;

(setq org-lowest-priority ?E)

(use-package! pretty-agenda)
(use-package! org-super-agenda
  :commands org-super-agenda-mode)
(after! org-agenda
  (org-super-agenda-mode))

(setq org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-include-deadlines t
      org-agenda-todo-ignore-scheduled 'future
      org-agenda-block-separator nil
      org-agenda-tags-column 100 ;; from testing this seems to be a good value
      org-agenda-compact-blocks t)
(setq org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "WIP(w)" "INTR(i)" "|" "DONE(d)" "DELEGATED(D)" "KILL(k)")
                          (sequence "PROJ(p)" "DONE(d)")))
(setq org-agenda-custom-commands
      '(("o" "Overview"
         ((agenda "" ((org-agenda-span 'day)
                      (org-super-agenda-groups
                       '((:name "Today"
                          :time-grid t
                          :date today
                          :todo "TODAY"
                          :scheduled today
                          :order 1)))))
          (alltodo "" ((org-agenda-overriding-header "")
                       (org-super-agenda-groups
                        '((:name "Next to do"
                           :todo "NEXT"
                           :order 1)
                          (:name "Unclosed loops"
                           :todo "WIP"
                           :order 2)
                          (:name "Important"
                           :tag "Important"
                           :priority "A"
                           :order 6)
                          (:name "Due Today"
                           :deadline today
                           :order 2)
                          (:name "Due Soon"
                           :deadline future
                           :order 8)
                          (:name "Overdue"
                           :deadline past
                           :face error
                           :order 7)
                          (:name "Self care"
                           :tag "selfhelp"
                           :order 9)
                          (:name "Assignments"
                           :tag "Assignment"
                           :order 10)
                          (:name "Issues"
                           :tag "Issue"
                           :order 12)
                          (:name "Emacs"
                           :tag "Emacs"
                           :order 13)
                          (:name "Projects"
                           :tag "Project"
                           :order 14)
                          (:name "Research"
                           :tag "Research"
                           :order 15)
                          (:name "To read"
                           :tag "Read"
                           :order 30)
                          (:name "Waiting"
                           :todo "WAITING"
                           :order 20)
                          (:name "Projekt inżynierski"
                           :tag "inz"
                           :order 31)
                          (:name "University"
                           :tag "uczelnia"
                           :order 32)
                          (:name "Computers"
                           :tag "computers"
                           :order 33)
                          (:name "Selfhosted"
                           :tag "selfhosted"
                           :order 34)
                          (:name "Trivial"
                           :priority<= "E"
                           :tag ("Trivial" "Unimportant")
                           :todo ("SOMEDAY")
                           :order 90)
                          (:discard (:tag ("Chore" "Routine" "Daily")))))))))))
(setq org-super-agenda-header-map (make-sparse-keymap))
<<capture-templates>>
(add-hook! 'org-mode-hook #'org-pretty-table-mode)
(add-hook! 'org-mode-hook #'+org-pretty-mode)
(add-hook! 'org-mode-hook #'hl-line-mode)
(add-hook! 'org-mode-hook #'mixed-pitch-mode)
(add-hook! 'org-mode-hook #'laas-mode)
#+end_src
#+name: prettify-capture
#+begin_src elisp
(defun org-capture-select-template-prettier (&optional keys)
  "Select a capture template, in a prettier way than default
Lisp programs can force the template by setting KEYS to a string."
  (let ((org-capture-templates
         (or (org-contextualize-keys
              (org-capture-upgrade-templates org-capture-templates)
              org-capture-templates-contexts)
             '(("t" "Task" entry (file+headline "" "Tasks")
                "* TODO %?\n  %u\n  %a")))))
    (if keys
        (or (assoc keys org-capture-templates)
            (error "No capture template referred to by \"%s\" keys" keys))
      (org-mks org-capture-templates
               "Select a capture template\n━━━━━━━━━━━━━━━━━━━━━━━━━"
               "Template key: "
               `(("q" ,(concat (all-the-icons-octicon "stop" :face 'all-the-icons-red :v-adjust 0.01) "\tAbort")))))))
(advice-add 'org-capture-select-template :override #'org-capture-select-template-prettier)

(defun org-mks-pretty (table title &optional prompt specials)
  "Select a member of an alist with multiple keys. Prettified.

TABLE is the alist which should contain entries where the car is a string.
There should be two types of entries.

1. prefix descriptions like (\"a\" \"Description\")
   This indicates that `a' is a prefix key for multi-letter selection, and
   that there are entries following with keys like \"ab\", \"ax\"…

2. Select-able members must have more than two elements, with the first
   being the string of keys that lead to selecting it, and the second a
   short description string of the item.

The command will then make a temporary buffer listing all entries
that can be selected with a single key, and all the single key
prefixes.  When you press the key for a single-letter entry, it is selected.
When you press a prefix key, the commands (and maybe further prefixes)
under this key will be shown and offered for selection.

TITLE will be placed over the selection in the temporary buffer,
PROMPT will be used when prompting for a key.  SPECIALS is an
alist with (\"key\" \"description\") entries.  When one of these
is selected, only the bare key is returned."
  (save-window-excursion
    (let ((inhibit-quit t)
          (buffer (org-switch-to-buffer-other-window "*Org Select*"))
          (prompt (or prompt "Select: "))
          case-fold-search
          current)
      (unwind-protect
          (catch 'exit
            (while t
              (setq-local evil-normal-state-cursor (list nil))
              (erase-buffer)
              (insert title "\n\n")
              (let ((des-keys nil)
                    (allowed-keys '("\C-g"))
                    (tab-alternatives '("\s" "\t" "\r"))
                    (cursor-type nil))
                ;; Populate allowed keys and descriptions keys
                ;; available with CURRENT selector.
                (let ((re (format "\\`%s\\(.\\)\\'"
                                  (if current (regexp-quote current) "")))
                      (prefix (if current (concat current " ") "")))
                  (dolist (entry table)
                    (pcase entry
                      ;; Description.
                      (`(,(and key (pred (string-match re))) ,desc)
                       (let ((k (match-string 1 key)))
                         (push k des-keys)
                         ;; Keys ending in tab, space or RET are equivalent.
                         (if (member k tab-alternatives)
                             (push "\t" allowed-keys)
                           (push k allowed-keys))
                         (insert (propertize prefix 'face 'font-lock-comment-face) (propertize k 'face 'bold) (propertize "›" 'face 'font-lock-comment-face) "  " desc "…" "\n")))
                      ;; Usable entry.
                      (`(,(and key (pred (string-match re))) ,desc . ,_)
                       (let ((k (match-string 1 key)))
                         (insert (propertize prefix 'face 'font-lock-comment-face) (propertize k 'face 'bold) "   " desc "\n")
                         (push k allowed-keys)))
                      (_ nil))))
                ;; Insert special entries, if any.
                (when specials
                  (insert "─────────────────────────\n")
                  (pcase-dolist (`(,key ,description) specials)
                    (insert (format "%s   %s\n" (propertize key 'face '(bold all-the-icons-red)) description))
                    (push key allowed-keys)))
                ;; Display UI and let user select an entry or
                ;; a sub-level prefix.
                (goto-char (point-min))
                (unless (pos-visible-in-window-p (point-max))
                  (org-fit-window-to-buffer))
                (let ((pressed (org--mks-read-key allowed-keys
                                                  prompt
                                                  (not (pos-visible-in-window-p (1- (point-max)))))))
                  (setq current (concat current pressed))
                  (cond
                   ((equal pressed "\C-g") (user-error "Abort"))
                   ;; Selection is a prefix: open a new menu.
                   ((member pressed des-keys))
                   ;; Selection matches an association: return it.
                   ((let ((entry (assoc current table)))
                      (and entry (throw 'exit entry))))
                   ;; Selection matches a special entry: return the
                   ;; selection prefix.
                   ((assoc current specials) (throw 'exit current))
                   (t (error "No entry available")))))))
        (when buffer (kill-buffer buffer))))))
(advice-add 'org-mks :override #'org-mks-pretty)
#+end_src
#+name: capture-templates
#+begin_src elisp :noweb yes
(use-package! doct :commands doct)
(after! org-capture
  <<prettify-capture>>
  (setq org-capture-templates
        (doct '(("Personal todo" :keys "t"
                   :icon ("checklist" :set "octicon" :color "green")
                   :file +org-capture-todo-file
                   :prepend t
                   :headline "Private"
                   :type entry
                   :template ("* TODO %?"
                              "%a"))
                  ("Personal note" :keys "n"
                   :icon ("sticky-note-o" :set "faicon" :color "green")
                   :file +org-capture-todo-file
                   :prepend t
                   :headline "Private"
                   :type entry
                   :template ("* %?"
                              "%a"))
                ("University" :keys "u"
                 :icon ("university" :set "faicon" :color "blue")
                 :file +org-capture-todo-file
                 :prepend t
                 :template ("* TODO %?"
                            " %a")
                 :children (
("Koło" :keys "k" :icon ("university" :set "faicon" :color "magenta") :headline "Koło")
("Autoprezentacja i wystąpienia publiczne" :keys "a" :icon ("university" :set "faicon" :color "magenta") :headline "Autoprezentacja i wystąpienia publiczne")
("Ekonometria" :keys "e" :icon ("university" :set "faicon" :color "magenta") :headline "Ekonometria")
("Modelowanie danych" :keys "M" :icon ("university" :set "faicon" :color "magenta") :headline "Modelowanie danych")
("Nowoczesne metody uczenia maszynowego" :keys "m" :icon ("university" :set "faicon" :color "magenta") :headline "Nowoczesne metody uczenia maszynowego")
("Procesy stochastyczne" :keys "s" :icon ("university" :set "faicon" :color "magenta") :headline "Procesy stochastyczne")
("Rozwój kompetencji biznesowych" :keys "r" :icon ("university" :set "faicon" :color "magenta") :headline "Rozwój kompetencji biznesowych")
("Usługi sieciowe w biznesie" :keys "S" :icon ("university" :set "faicon" :color "magenta") :headline "Usługi sieciowe w biznesie")
("Wielowymiarowa analiza danych" :keys "d" :icon ("university" :set "faicon" :color "magenta") :headline "Wielowymiarowa analiza danych")
("Wnioskowanie w warunkach niepewności" :keys "n" :icon ("university" :set "faicon" :color "magenta") :headline "Wnioskowanie w warunkach niepewności")
("Teoria gier" :keys "g" :icon ("university" :set "faicon" :color "magenta") :headline "Teoria gier")
("J. angielski dla inżynierów" :keys "e" :icon ("university" :set "faicon" :color "magenta") :headline "J. angielski dla inżynierów")                ))
                                 ("Project" :keys "p"
                   :icon ("repo" :set "octicon" :color "silver")
                   :prepend t
                   :type entry
                   :headline "Inbox"
                   :template ("* %{time-or-todo} %?"
                              "%i"
                              "%a")
                   :file ""
                   :custom (:time-or-todo "")
                   :children (("Project-local todo" :keys "t"
                               :icon ("checklist" :set "octicon" :color "green")
                               :time-or-todo "TODO"
                               :file +org-capture-project-todo-file)
                              ("Project-local note" :keys "n"
                               :icon ("sticky-note" :set "faicon" :color "yellow")
                               :time-or-todo "%U"
                               :file +org-capture-project-notes-file)
                              ("Project-local changelog" :keys "c"
                               :icon ("list" :set "faicon" :color "blue")
                               :time-or-todo "%U"
                               :heading "Unreleased"
                               :file +org-capture-project-changelog-file)))
                  ("\tCentralised project templates"
                   :keys "o"
                   :type entry
                   :prepend t
                   :template ("* %{time-or-todo} %?"
                              "%i"
                              "%a")
                   :children (("Project todo"
                               :keys "t"
                               :prepend nil
                               :time-or-todo "TODO"
                               :heading "Tasks"
                               :file +org-capture-central-project-todo-file)
                              ("Project note"
                               :keys "n"
                               :time-or-todo "%U"
                               :heading "Notes"
                               :file +org-capture-central-project-notes-file)
                              ("Project changelog"
                               :keys "c"
                               :time-or-todo "%U"
                               :heading "Unreleased"
                               :file +org-capture-central-project-changelog-file)))
                ))))
#+end_src
I'm often writing documents both in Polish and English, so using both of these dictionaries should make it less pain.
#+name: writingconf
#+begin_src elisp
(use-package! guess-language
  :config
  :init (add-hook 'text-mode-hook #'guess-language-mode)
(setq guess-language-langcodes '((en . ("en_US" "English"))
                                 (pl . ("pl_PL" "Polish")))
      guess-language-languages '(en pl)))
(setq ispell-dictionary "pl_PL")
(setq langtool-bin "/etc/profiles/per-user/pg/bin/languagetool-commandline"
      langtool-default-language nil)
#+end_src
All my projects are stored in special directory and I'm organizing them in separate categories such as ~university~, ~private~ and various other.
#+name: projects
#+begin_src elisp
;;; projectile
(setq projectile-project-search-path '(("~/Projects" . 2)))
#+end_src
I have to write /a lot/ in R for classes, so ESS is rudimentary.
#+name: rconf
#+begin_src elisp
;;; ess config
(setq ess-R-font-lock-keywords
      '((ess-R-fl-keyword:keywords . t)
        (ess-R-fl-keyword:constants . t)
        (ess-R-fl-keyword:modifiers . t)
        (ess-R-fl-keyword:fun-defs . t)
        (ess-R-fl-keyword:assign-ops . t)
        (ess-R-fl-keyword:%op% . t)
        (ess-fl-keyword:fun-calls . t)
        (ess-fl-keyword:numbers . t)
        (ess-fl-keyword:operators . t)
        (ess-fl-keyword:delimiters . t)
        (ess-fl-keyword:= . t)
        (ess-R-fl-keyword:F&T . t)))
#+end_src
I don't use mu4e much, but it's nice to have.
#+name: emailconf
#+begin_src elisp
;;;;;;;;;;;
;; EMAIL ;;
;;;;;;;;;;;

(defvar my-mu4e-account-alist
  '(("Private"
     (mu4e-sent-folder "/private/Saved Items")
     (mu4e-drafts-folder "/private/Drafts")
     (user-mail-address "patryk@gronkiewi.cz")
     (smtpmail-default-smtp-server "smtp.purelymail.com")
     (smtpmail-local-domain "purelymail.com")
     (smtpmail-smtp-user "patryk@gronkiewi.cz")
     (smtpmail-smtp-server "smtp.purelymail.com")
     (smtpmail-stream-type starttls)
     (smtpmail-smtp-service 587))
    ("University"
     (mu4e-sent-folder "/university/Saved Items")
     (mu4e-drafts-folder "/university/Drafts")
     (user-mail-address "164157@stud.prz.edu.pl")
     (smtpmail-default-smtp-server "stud.prz.edu.pl")
     (smtpmail-local-domain "stud.prz.edu.pl")
     (smtpmail-smtp-user "164157@stud.prz.edu.pl")
     (smtpmail-smtp-server "stud.prz.edu.pl")
     (smtpmail-stream-type starttls)
     (smtpmail-smtp-service 587))))
(defun my-mu4e-set-account ()
  "Set the account for composing a message."
  (let* ((account
          (if mu4e-compose-parent-message
              (let ((maildir (mu4e-message-field mu4e-compose-parent-message :maildir)))
                (string-match "/\\(.*?\\)/" maildir)
                (match-string 1 maildir))
            (completing-read (format "Compose with account: (%s) "
                                     (mapconcat #'(lambda (var) (car var))
                                                my-mu4e-account-alist "/"))
                             (mapcar #'(lambda (var) (car var)) my-mu4e-account-alist)
                             nil t nil nil (caar my-mu4e-account-alist))))
         (account-vars (cdr (assoc account my-mu4e-account-alist))))
    (if account-vars
        (mapc #'(lambda (var)
                  (set (car var) (cadr var)))
              account-vars)
      (error "No email account found"))))

;; ask for account when composing mail
(add-hook 'mu4e-compose-pre-hook 'my-mu4e-set-account)

#+end_src
My beloved RSS feeds are stored in my custom FreshRSS instance. I access them with ~elfeed-protocol~ via Fever API.
#+name: rss
#+begin_src elisp
(use-package! elfeed-protocol
  :after elfeed
  :config (elfeed-protocol-enable)
  :custom
  (elfeed-use-curl t)
  (elfeed-set-timeout 36000)
  (elfeed-feeds (list
                 (list "fever+https://pg@rss.lab.home"
                       :api-url "https://rss.lab.home/api/fever.php"
                       :use-authinfo t))))
#+end_src
Sometimes I like to browse Gopher holes and Gemini capsules, so I'm using elpher to not even leave Emacs. Ever.
#+name: protoconf
#+begin_src elisp
(use-package! elpher)
#+end_src
#+begin_src elisp :tangle config.el :noweb yes
<<identity>>
<<fonts>>
<<theming>>
<<calendar>>
<<orgconf>>
<<writingconf>>
<<projects>>
<<rconf>>
<<emailconf>>
<<protoconf>>
<<rss>>
#+end_src

* Host specific configuration
** Work
** Private
* Custom theme
It's based on Horizon theme, but in a light way!
#+begin_src elisp :tangle themes/horizon-light.el
;;; doom-horizon-light-theme.el --- Inspired by VSCode Horizon -*- lexical-binding: t; no-byte-compile: t; -*-

;;; Commentary:
;;; This theme was inspired by the port of Horizon to Emacs
;;; see: https://github.com/aodhneine/horizon-theme.el

(require 'doom-themes)

;;; Code:
(defgroup doom-horizon-light-theme nil
  "Options for the `doom-horizon-light' theme."
  :group 'doom-themes)

(defcustom doom-horizon-light-brighter-modeline nil
  "If non-nil, more vivid colors will be used to style the mode-line."
  :group 'doom-horizon-light-theme
  :type 'boolean)

(defcustom doom-horizon-light-brighter-comments nil
  "If non-nil, comments will be highlighted in more vivid colors."
  :group 'doom-horizon-light-theme
  :type 'boolean)

(defcustom doom-horizon-light-comment-bg doom-horizon-light-brighter-comments
  "If non-nil, comments will have a subtle, darker background. Enhancing their legibility."
  :group 'doom-horizon-light-theme
  :type 'boolean)

(defcustom doom-horizon-light-padded-modeline doom-themes-padded-modeline
  "If non-nil, adds a 4px padding to the mode-line. Can be an integer to determine the exact padding."
  :group 'doom-horizon-light-theme
  :type '(choice integer boolean))

;;
(def-doom-theme doom-horizon-light
  "A port of the port of the Visual Studio Code theme Horizon"

  ;; name       default    256       16
  ((bg         '("#fdf0ed" nil       nil            ))
   (bg-alt     '("#fadad1" nil       nil            ))
   (base0      '("#fdf0ed" "#fdf0ed" "white"        ))
   (base1      '("#fadad1" "#fadad1" "white"        ))
   (base2      '("#f9cbbe" "#f9cbbe" "white"        ))
   (base3      '("#f9cec3" "#f9cec3" "white"        ))
   (base4      '("#6a6a6a" "#6a6a6a" "white"        ))
   (base5      '("#232530" "#555555" "white"        ))
   (base6      '("#1d1f27" "#333333" "brightblack"  ))
   (base7      '("#1a1c23" "#111111" "brightblack"  ))
   (base8      '("#16161c" "black"   "black"        ))
   (fg-alt     '("#1c1e26" "#fdf0ed" "brightwhite"  ))
   (fg         '("#232530" "#c7c9cb" "white"        ))

   (grey       base4)
   (red        '("#da103f" "#e95678" "red"          ))
   (orange     '("#dc3318" "#f09383" "brightred"    ))
   (green      '("#07da8c" "#09f7a0" "green"        ))
   (teal       '("#87ceeb" "#87ceeb" "brightgreen"  ))
   (yellow     '("#f77d26" "#fab795" "yellow"       ))
   (blue       '("#1eb980" "#21bfc2" "brightblue"   ))
   (dark-blue  '("#1eaeae" "#25b2bc" "blue"         ))
   (magenta    '("#6c6f93" "#6c6f93" "magenta"      ))
   (violet     '("#8931b9" "#b877db" "brightmagenta"))
   (cyan       '("#59e3e3" "#59e3e3" "brightcyan"   ))
   (dark-cyan  '("#27d797" "#27d797" "cyan"   ))

   ;; additional highlighting colours for horizon
   (hor-highlight  `(,(doom-lighten (car base3) 0.05) ,@(cdr base2)))
   (hor-highlight-selected (doom-lighten base3 0.1))
   (hor-highlight-bright (doom-lighten base3 0.2))
   (hor-highlight-brighter (doom-lighten base3 0.5))

   ;; face categories -- required for all themes
   (highlight      red)
   (vertical-bar   base0)
   (selection      violet)
   (builtin        violet)
   (comments       (if doom-horizon-light-brighter-comments magenta hor-highlight-bright))
   (doc-comments   yellow)
   (constants      orange)
   (functions      teal)
   (keywords       violet)
   (methods        magenta)
   (operators      teal)
   (type           teal)
   (strings        yellow)
   (variables      red)
   (numbers        orange)
   (region         hor-highlight)
   (error          red)
   (warning        dark-cyan)
   (success        green)
   (vc-modified    orange)
   (vc-added       green)
   (vc-deleted     red)


   ;; custom categories
   (hidden     `(,(car bg) "black" "black"))
   (-modeline-bright doom-horizon-light-brighter-modeline)
   (-modeline-pad
    (when doom-horizon-light-padded-modeline
      (if (integerp doom-horizon-light-padded-modeline) doom-horizon-light-padded-modeline 4)))

   (modeline-fg     `(,(doom-darken (car fg) 0.2) ,@(cdr fg-alt)))
   (modeline-fg-alt `(,(doom-lighten (car bg) 0.2) ,@(cdr base3)))

   (modeline-bg (if -modeline-bright base4 base1))
   (modeline-bg-inactive base1))


  ;;;; Base theme face overrides
  (((font-lock-comment-face &override)
    :slant 'italic
    :background (if doom-horizon-light-comment-bg (doom-lighten bg 0.03)))
   (fringe :background bg)
   (link :foreground yellow :inherit 'underline)
   ((line-number &override) :foreground hor-highlight-selected)
   ((line-number-current-line &override) :foreground hor-highlight-brighter)
   (mode-line
    :background modeline-bg :foreground modeline-fg
    :box (if -modeline-pad `(:line-width ,-modeline-pad :color ,modeline-bg)))
   (mode-line-inactive
    :background modeline-bg-inactive :foreground modeline-fg-alt
    :box (if -modeline-pad `(:line-width ,-modeline-pad :color ,modeline-bg-inactive)))
   (mode-line-emphasis :foreground (if -modeline-bright base8 highlight))
   (mode-line-highlight :background base1 :foreground fg)
   (tooltip :background base0 :foreground fg)

   ;;;; company
   (company-box-background    :background base0 :foreground fg)
   (company-tooltip-common    :foreground red :weight 'bold)
   (company-tooltip-selection :background hor-highlight :foreground fg)
   ;;;; css-mode <built-in> / scss-mode
   (css-proprietary-property :foreground violet)
   (css-property             :foreground fg)
   (css-selector             :foreground red)
   ;;;; doom-modeline
   (doom-modeline-bar :background (if -modeline-bright modeline-bg highlight))
   (doom-modeline-highlight :foreground (doom-lighten bg 0.3))
   (doom-modeline-project-dir :foreground red :inherit 'bold )
   (doom-modeline-buffer-path :foreground red)
   (doom-modeline-buffer-file :foreground fg)
   (doom-modeline-buffer-modified :foreground violet)
   (doom-modeline-panel :background base1)
   (doom-modeline-urgent :foreground modeline-fg)
   (doom-modeline-info :foreground cyan)
   ;;;; elscreen
   (elscreen-tab-other-screen-face :background "#353a42" :foreground "#1e2022")
   ;;;; evil
   (evil-ex-search          :background hor-highlight-selected :foreground fg)
   (evil-ex-lazy-highlight  :background hor-highlight :foreground fg)
   ;;;; haskell-mode
   (haskell-type-face :foreground violet)
   (haskell-constructor-face :foreground yellow)
   (haskell-operator-face :foreground fg)
   (haskell-literate-comment-face :foreground hor-highlight-selected)
   ;;;; ivy
   (ivy-current-match       :background hor-highlight :distant-foreground nil)
   (ivy-posframe-cursor     :background red :foreground base0)
   (ivy-minibuffer-match-face-2 :foreground red :weight 'bold)
   ;;;; js2-mode
   (js2-object-property        :foreground red)
   ;;;; markdown-mode
   (markdown-markup-face           :foreground cyan)
   (markdown-link-face             :foreground orange)
   (markdown-link-title-face       :foreground yellow)
   (markdown-header-face           :foreground red :inherit 'bold)
   (markdown-header-delimiter-face :foreground red :inherit 'bold)
   (markdown-language-keyword-face :foreground orange)
   (markdown-markup-face           :foreground fg)
   (markdown-bold-face             :foreground violet)
   (markdown-table-face            :foreground fg :background base1)
   ((markdown-code-face &override) :foreground orange :background base1)
   ;;;; orderless
   (orderless-match-face-1 :weight 'bold :foreground (doom-blend red fg 0.6) :background (doom-blend red bg 0.1))
   ;;;; mic-paren
   (paren-face-match    :foreground green   :background base0 :weight 'ultra-bold)
   (paren-face-mismatch :foreground yellow :background base0   :weight 'ultra-bold)
   (paren-face-no-match :inherit 'paren-face-mismatch :weight 'ultra-bold)
   ;;;; magit
   (magit-section-heading :foreground red)
   (magit-branch-remote   :foreground orange)
   ;;;; outline <built-in>
   ((outline-1 &override) :foreground blue :background nil)
   ;;;; org <built-in>
   ((org-block &override) :background base1)
   ((org-block-begin-line &override) :background base1 :foreground comments)
   (org-hide :foreground hidden)
   (org-link :inherit 'underline :foreground yellow)
   (org-agenda-done :foreground cyan)
   ;;;; rjsx-mode
   (rjsx-tag :foreground red)
   (rjsx-tag-bracket-face :foreground red)
   (rjsx-attr :foreground cyan :slant 'italic :weight 'medium)
   ;;;; solaire-mode
   (solaire-mode-line-face
    :inherit 'mode-line
    :box (if -modeline-pad `(:line-width ,-modeline-pad :color ,modeline-bg)))
   (solaire-mode-line-inactive-face
    :inherit 'mode-line-inactive
    :box (if -modeline-pad `(:line-width ,-modeline-pad :color ,modeline-bg-inactive)))
   ;;;; treemacs
   (treemacs-root-face :foreground fg :weight 'bold :height 1.2)
   (doom-themes-treemacs-root-face :foreground fg :weight 'ultra-bold :height 1.2)
   (doom-themes-treemacs-file-face :foreground fg)
   (treemacs-directory-face :foreground fg)
   (treemacs-git-modified-face :foreground green)
   ;;;; web-mode
   (web-mode-html-tag-bracket-face :foreground red)
   (web-mode-html-tag-face         :foreground red)
   (web-mode-html-attr-name-face   :foreground orange)))

;;; doom-horizon-light-theme.el ends here
#+end_src
