#+TITLE:   pgronkievitz's configuration of /DOOM/
#+STARTUP: inlineimages nofold

* Table of contents :TOC:
:properties:
:visibility: folded:
:end:
- [[#misc][Misc]]
  - [[#completions][Completions]]
  - [[#doom-features][Doom features]]
  - [[#dev-features][Dev features]]
  - [[#visual-nicities][Visual nicities]]
  - [[#making-doom-a-proper-ide][Making DOOM a proper IDE]]
  - [[#ergonomics][Ergonomics]]
  - [[#ui][UI]]
  - [[#editor][Editor]]
  - [[#emacs][Emacs]]
  - [[#terminal][Terminal]]
  - [[#checking][Checking]]
  - [[#tools][Tools]]
  - [[#os][OS]]
  - [[#languages][Languages]]
  - [[#email][Email]]
  - [[#app][App]]
  - [[#config][Config]]
- [[#initel-file][~init.el~ file]]
- [[#packages][Packages]]
  - [[#org-packages][Org packages]]
  - [[#ye-olde-internet][Ye olde internet]]
  - [[#writing-in-general][Writing in general]]
  - [[#theming][Theming]]
- [[#configuration][Configuration]]

* Misc
** Completions
#+name: completion
#+begin_src elisp :noweb yes
:completion
    (company
    +childframe)
    (vertico +icons)
#+end_src
** Doom features
#+name: doomfeatui
#+begin_src elisp
doom                ; what makes DOOM look the way it does
doom-dashboard      ; a nifty splash screen for Emacs
doom-quit           ; DOOM quit-message prompts when you quit Emacs
#+end_src
** Dev features
#+name: devfeatui
#+begin_src elisp
fill-column
indent-guides       ; highlighted indent columns
vc-gutter           ; vcs diff in the fringe
vi-tilde-fringe     ; fringe tildes to mark beyond EOB
#+end_src
** Visual nicities
#+name: nicevisui
#+begin_src elisp
(emoji +github +unicode)
hl-todo             ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
(ligatures
+extra)            ; ligatures and symbols to make your code pretty again
(modeline)            ; snazzy, Atom-inspired modeline, plus API
ophints             ; highlight the region an operation acts on
(popup +all)        ; tame sudden yet inevitable temporary windows
zen                 ; distraction-free coding or writing
#+end_src
** Making DOOM a proper IDE
#+name: ideui
#+begin_src elisp
(treemacs +lsp)              ; a project drawer, like neotree but cooler
#+end_src
** Ergonomics
#+name: ergonomicsui
#+begin_src elisp
(window-select +numbers)     ; visually switch windows
workspaces          ; tab emulation, persistence & separate workspaces
#+end_src
#+name: ergonomicseditor
#+begin_src elisp
#+end_src
** UI
#+name: ui
#+begin_src elisp :noweb yes
:ui
    <<doomfeatui>>
    <<nicevisui>>
    <<devfeatui>>
    <<ideui>>
    <<ergonomicsui>>
#+end_src
** Editor
#+name: editor
#+begin_src elisp :noweb yes
:editor
    (evil
    +everywhere)       ; come to the dark side, we have cookies
    file-templates      ; auto-snippets for empty files
    fold                ; (nigh) universal code folding
    (format
    +onsave)           ; automated prettiness
    rotate-text       ; cycle region at point between text candidates
    snippets            ; my elves. They type so I don't have to
    word-wrap           ; soft wrapping with language-aware indent
#+end_src
** Emacs
#+name: emacs
#+begin_src elisp
:emacs
    (dired
    +icons
    +ranger)         ; making dired pretty [functional]
    electric          ; smarter, keyword-based electric-indent
    (ibuffer +icons)         ; interactive buffer management
    (undo
    +tree)           ; persistent, smarter undo for your inevitable mistakes
    vc                ; version-control and Emacs, sitting in a tree
#+end_src
** Terminal
#+name: terminal
#+begin_src elisp
:term
    vterm               ; the best terminal emulation in Emacs
#+end_src
** Checking
#+name: checkers
#+begin_src elisp
:checkers
    (syntax +childframe)     ; tasing you for every semicolon you forget
    (spell +flyspell +hunspell)        ; tasing you for misspelling mispelling
    grammar           ; tasing grammar mistake every you make
#+end_src
** Tools
#+name: tools
#+begin_src elisp
:tools
    ;;ansible
    biblio
    debugger          ; FIXME stepping through code, to help you add bugs
    direnv
    (docker +lsp)
    editorconfig        ; let someone else argue about tabs vs spaces
    ein                 ; tame Jupyter notebooks with emacs
    (eval +overlay)     ; run code, run (also, repls)
    (lookup
    +offline
    +dictionary
    +docsets)           ; navigate your code and its documentation
    (lsp +peek)
    (magit
    +forge)            ; a git porcelain for Emacs
    make                ; run make tasks from Emacs
    pdf                 ; pdf enhancements
    rgb                 ; creating color strings
    terraform         ; infrastructure as code
    upload              ; map local to remote projects via ssh/ftp
#+end_src
** OS
#+name: os
#+begin_src elisp
:os
    tty               ; improve the terminal Emacs experience
#+end_src
** Languages
#+name: languages
#+begin_src elisp
:lang
    beancount         ; mind the GAAP
    ;;(cc
    ;; +lsp)               ; C > C++ == 1
    (csharp +lsp +dotnet)            ; unity, .NET, and mono shenanigans
    data                ; config/data formats
    emacs-lisp          ; drown in parentheses
    (ess +lsp)               ; emacs speaks statistics
    (go +lsp)         ; the hipster dialect
    (json
    +lsp)              ; At least it ain't XML
    ;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
    (latex
    +latexmk
    +cdlatex)           ; writing papers in Emacs has never been so fun
    (lua +lsp)               ; one-based indices? one-based indices
    (markdown)
    nix                 ; I hereby declare "nix geht mehr!"
    (org
    +dragndrop
    +gnuplot
    +pandoc
    +pomodoro
    +present
    +pretty
    +hugo
    +noter
    +roam2)              ; organize your plain life in plain text
    plantuml            ; diagrams for confusing people more
    (python
    +lsp
    +pyright)             ; beautiful is better than ugly
    rest              ; Emacs as a REST client
    rst               ; ReST in peace
    ;;(rust
    ;;+lsp)              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
    sh                ; she sells {ba,z,fi}sh shells on the C xor
    web               ; the tubes
    (yaml
    +lsp)              ; JSON, but readable
#+end_src
** Email
#+name: email
#+begin_src elisp
:email
    (mu4e +org)
#+end_src
** App
#+name: app
#+begin_src elisp
:app
    calendar
    irc               ; how neckbeards socialize
    rss        ; emacs as an RSS reader
#+end_src
** Config
#+name: config
#+begin_src elisp
:config
    (default +bindings +smartparens)
#+end_src
* ~init.el~ file
#+begin_src elisp :tangle init.el :noweb yes
(doom!
       <<completion>>
       <<ui>>
       <<editor>>
       <<emacs>>
       <<terminal>>
       <<checkers>>
       <<tools>>
       <<os>>
       <<languages>>
       <<email>>
       <<app>>
       <<config>>
)
#+end_src

* Packages
#+begin_src elisp :tangle packages.el :noweb yes
<<orgpkgs>>
<<protopkgs>>
<<writingpkgs>>
<<themingpkgs>>
#+end_src
** Org packages
#+name: orgpkgs
#+begin_src elisp
(package! org-super-agenda)
(package! org-pretty-table :recipe (:host github :repo "Fuco1/org-pretty-table"))
(package! org-fragtog)
(package! org-appear :recipe (:host github :repo "awth13/org-appear"))
(package! org-pretty-tags)
(package! org-ol-tree :recipe (:host github :repo "Townk/org-ol-tree"))
(package! laas :recipe (:host github :repo "tecosaur/LaTeX-auto-activating-snippets"))
(package! org-roam-ui :recipe (:host github :repo "org-roam/org-roam-ui" :files ("*.el" "out")))
(package! websocket)
(package! org-alert :recipe (:host github :repo "spegoraro/org-alert" :files ("*.el")))
(package! org-notifications :recipe (:host github :repo "doppelc/org-notifications" :files ("*.el" "sounds")))
(package! pretty-agenda :recipe (:host github :repo "Artawower/.doom" :files ("pretty-agenda.el")))
#+end_src
** Ye olde internet
#+name: protopkgs
#+begin_src elisp
(package! elpher)
(package! elfeed-protocol)
#+end_src
** Writing in general
#+name: writingpkgs
#+begin_src elisp
(package! guess-language)
#+end_src
** Theming
#+name: themingpkgs
#+begin_src elisp
(unpin! doom-themes)
#+end_src
* Configuration
#+name: identity
#+begin_src elisp
(setq user-full-name "Patryk Gronkiewicz")
(unless (eq (system-name) "themis")
    (setq user-mail-address "patryk.gronkiewicz@omniscopy.com")
    (setq user-mail-address "patryk@gronkiewicz.dev")
  )
#+end_src

#+name: fonts
#+begin_src elisp
(setq doom-font (font-spec :family "VictorMono Nerd Font" :size 14)
      doom-big-font (font-spec :family "VictorMono Nerd Font" :size 28)
      doom-variable-pitch-font (font-spec :family "Merriweather" :size 14)
      doom-serif-font (font-spec :family "UbuntuMono Nerd Font" :size 14))
#+end_src

#+name: theming
#+begin_src elisp
(setq doom-theme 'doom-ayu-light)
(setq fancy-splash-image "~/Pictures/emacs.svg")
#+end_src
#+name: calendar
#+begin_src elisp
(setq calendar-week-start-day 1
      calendar-date-style 'iso)
(setq calendar-christian-all-holidays-flag t)
(setq calendar-holidays
 '((holiday-fixed 1 1 "New Year's Day")
   (holiday-fixed 2 14 "Valentine's Day")
   (holiday-fixed 3 17 "St. Patrick's Day")
   (holiday-fixed 4 1 "April Fools' Day")
   (holiday-fixed 5 25 "Mother's Day")
   (holiday-fixed 5 2 "Flag Day")
   (holiday-fixed 6 0 "Father's Day")
   (holiday-fixed 11 11 "Independence Day")
   (holiday-fixed 5 1 "Labor Day")
   (holiday-easter-etc)
   (holiday-fixed 12 25 "Christmas")
   (if calendar-christian-all-holidays-flag
       (append
        (holiday-fixed 1 6 "Epiphany")
        (holiday-fixed 12 24 "Christmas Eve")
        ;; (holiday-julian 12 25 "Christmas (Julian calendar)")
        (holiday-fixed 8 15 "Assumption")
        (holiday-advent 0 "Advent")))
   (solar-equinoxes-solstices)
   (holiday-sexp calendar-daylight-savings-starts
                 (format "Daylight Saving Time Begins %s"
                         (solar-time-string
                          (/ calendar-daylight-savings-starts-time
                             (float 60))
                          calendar-standard-time-zone-name)))
   (holiday-sexp calendar-daylight-savings-ends
                 (format "Daylight Saving Time Ends %s"
                         (solar-time-string
                          (/ calendar-daylight-savings-ends-time
                             (float 60))
                          calendar-daylight-time-zone-name)))))
#+end_src
#+name: orgconf
#+begin_src elisp
(setq org-directory "~/Documents/notes/")
(use-package! org-pretty-table
  :commands (org-pretty-table-mode global-org-pretty-table-mode))
(after! org-mode (global-org-pretty-table-mode))
(use-package! org-ol-tree
  :commands org-ol-tree)
(map! :map org-mode-map
      :after org
      :localleader
      :desc "Outline" "O" #'org-ol-tree)
(setq display-line-numbers-type 'relative)
(custom-set-faces
  '(org-level-1 ((t (:inherit outline-1 :height 1.5))))
  '(org-level-2 ((t (:inherit outline-2 :height 1.4))))
  '(org-level-3 ((t (:inherit outline-3 :height 1.3))))
  '(org-level-4 ((t (:inherit outline-4 :height 1.2))))
  '(org-level-5 ((t (:inherit outline-5 :height 1.1))))
  '(org-table ((t (:inherit 'fixed-pitch))))
  '(org-document-title ((t (:inherit 'variable-pitch :height 2.0))))
  '(org-inline-src-block ((t (:inherit 'fixed-pitch))))
  '(org-block ((t (:inherit 'fixed-pitch))))
  '(line-number ((t (:inherit 'fixed-pitch))))
  '(org-code ((t (:inherit 'fixed-pitch)))))
(setq org-hidden-keywords '(title))
(setq org-startup-indented t
      org-superstar-headline-bullets-list '("◉" "◈" "○" "▷")
      org-superstar-special-todo-items t
      org-ellipsis "  "
      org-pretty-entities t
      org-hide-emphasis-markers t
      org-agenda-block-separator ""
      org-fontify-whole-heading-line t
      org-fontify-done-headline t
      org-fontify-quote-and-verse-blocks t)
(setq
 org-pomodoro-keep-killed-pomodoro-time t)

(after! ox-hugo
  (setq org-blackfriday--org-element-string '((src-block . "Kod") (table . "Tabela") (figure . "Rysunek"))))

(use-package! websocket
  :after org-roam)
(use-package! org-roam-ui
  :after org
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))
(map! (:map org-mode-map
       :localleader
       :prefix ("m" . "org-roam")
       :desc "Open ORUI" :n "G" #'org-roam-ui-open))
;;; org-roam

;;;; create notes without entering
(defun org-roam-node-insert-immediate (arg &rest args)
  (interactive "P")
  (let ((args (cons arg args))
        (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                  '(:immediate-finish t)))))
    (apply #'org-roam-node-insert args)))
(map! :leader :desc "Create node without opening" "n r I" #'org-roam-node-insert-immediate)
;;; latex export
(setq org-latex-default-packages-alist
      '(("AUTO" "inputenc" t ("pdflatex"))
        ("T1" "fontenc" t ("pdflatex"))
        ("" "graphicx" t)
        ("" "longtable" nil)
        ("" "wrapfig" nil)
        ("" "rotating" nil)
        ("normalem" "ulem" t)
        ("" "amsmath" t)
        ("" "amssymb" t)
        ("" "capt-of" nil)
        ("" "listings")
        ("" "color")
        ("hidelinks" "hyperref" nil)
        ("AUTO" "babel" t ("pdflatex"))
        ("AUTO" "polyglossia" t ("xelatex" "lualatex")))
      org-latex-listings t)


;;; bibliography
(defvar my/bibs '("~/Documents/biblio.bib"))
(use-package citar-org
  :no-require
  :bind ; optional
  (:map org-mode-map
        ("C-c b" . #'org-cite-insert)) ; Also bound to C-c C-x C-@
  :custom
  (org-cite-global-bibliography my/bibs)
  (org-cite-insert-processor 'citar)
  (org-cite-follow-processor 'citar)
  (org-cite-activate-processor 'citar))
;;; latexmk export
(setq org-latex-pdf-process '("latexmk -f -pdf -%latex -shell-escape -interaction=nonstopmode -output-directory=%o %f"))
;;; orgmode misc
(use-package! org-alert)
(use-package! org-ol-tree)
(use-package! org-fragtog)
(use-package laas
  :hook ((LaTeX-mode org-mode) . laas-mode)
  :config ; do whatever here
  (aas-set-snippets 'laas-mode
                    ;; set condition!
                    :cond #'texmathp ; expand only while in math
                    "supp" "\\supp"
                    "On" "O(n)"
                    "O1" "O(1)"
                    "Olog" "O(\\log n)"
                    "Olon" "O(n \\log n)"
                    ;; bind to functions!
                    "Sum" (lambda () (interactive)
                            (yas-expand-snippet "\\sum_{$1}^{$2} $0"))
                    ;; add accent snippets
                    :cond #'laas-object-on-left-condition
                    "qq" (lambda () (interactive) (laas-wrap-previous-object "sqrt"))
                    :cond #'laas-org-mathp
                    "supp" "\\supp"
                    "On" "O(n)"
                    "O1" "O(1)"
                    "Olog" "O(\\log n)"
                    "Olon" "O(n \\log n)"
                    "ooo" "\\infty"
                    ;; bind to functions!
                    "Sum" (lambda () (interactive)
                            (yas-expand-snippet "\\sum_{$1^{$2} $0"))))

;;; agenda
;;;;;;;;;;;;
;; AGENDA ;;
;;;;;;;;;;;;

(setq org-lowest-priority ?E)

(use-package! pretty-agenda)
(use-package! org-super-agenda
  :commands org-super-agenda-mode)
(after! org-agenda
  (org-super-agenda-mode))

(setq org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-include-deadlines t
      org-agenda-todo-ignore-scheduled 'future
      org-agenda-block-separator nil
      org-agenda-tags-column 100 ;; from testing this seems to be a good value
      org-agenda-compact-blocks t)
(setq org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "WIP(w)" "INTR(i)" "|" "DONE(d)" "DELEGATED(D)" "KILL(k)")
                          (sequence "PROJ(p)" "DONE(d)")))
(setq org-agenda-custom-commands
      '(("o" "Overview"
         ((agenda "" ((org-agenda-span 'day)
                      (org-super-agenda-groups
                       '((:name "Today"
                          :time-grid t
                          :date today
                          :todo "TODAY"
                          :scheduled today
                          :order 1)))))
          (alltodo "" ((org-agenda-overriding-header "")
                       (org-super-agenda-groups
                        '((:name "Next to do"
                           :todo "NEXT"
                           :order 1)
                          (:name "Important"
                           :tag "Important"
                           :priority "A"
                           :order 6)
                          (:name "Due Today"
                           :deadline today
                           :order 2)
                          (:name "Due Soon"
                           :deadline future
                           :order 8)
                          (:name "Overdue"
                           :deadline past
                           :face error
                           :order 7)
                          (:name "Self care"
                           :tag "selfhelp"
                           :order 9)
                          (:name "Assignments"
                           :tag "Assignment"
                           :order 10)
                          (:name "Issues"
                           :tag "Issue"
                           :order 12)
                          (:name "Emacs"
                           :tag "Emacs"
                           :order 13)
                          (:name "Projects"
                           :tag "Project"
                           :order 14)
                          (:name "Research"
                           :tag "Research"
                           :order 15)
                          (:name "To read"
                           :tag "Read"
                           :order 30)
                          (:name "Waiting"
                           :todo "WAITING"
                           :order 20)
                          (:name "University"
                           :tag "uczelnia"
                           :order 32)
                          (:name "Computers"
                           :tag "computers"
                           :order 33)
                          (:name "Selfhosted"
                           :tag "selfhosted"
                           :order 34)
                          (:name "Trivial"
                           :priority<= "E"
                           :tag ("Trivial" "Unimportant")
                           :todo ("SOMEDAY")
                           :order 90)
                          (:discard (:tag ("Chore" "Routine" "Daily")))))))))))
(setq org-super-agenda-header-map (make-sparse-keymap))
(add-hook! 'org-mode-hook #'org-pretty-table-mode)
(add-hook! 'org-mode-hook #'+org-pretty-mode)
(add-hook! 'org-mode-hook #'hl-line-mode)
(add-hook! 'org-mode-hook #'variable-pitch-mode)
(add-hook! 'org-mode-hook #'laas-mode)
#+end_src
#+name: writingconf
#+begin_src elisp
(use-package! guess-language
  :config
  :init (add-hook 'text-mode-hook #'guess-language-mode)
(setq guess-language-langcodes '((en . ("en_US" "English"))
                                 (pl . ("pl_PL" "Polish")))
      guess-language-languages '(en pl)))
(setq ispell-dictionary "pl_PL")
(setq langtool-bin "/etc/profiles/per-user/pg/bin/languagetool-commandline"
      langtool-default-language nil)
#+end_src
#+name: projects
#+begin_src elisp
;;; projectile
(setq projectile-project-search-path '(("~/Projects" . 2)))
#+end_src
#+name: rconf
#+begin_src elisp
;;; ess config
(setq ess-R-font-lock-keywords
      '((ess-R-fl-keyword:keywords . t)
        (ess-R-fl-keyword:constants . t)
        (ess-R-fl-keyword:modifiers . t)
        (ess-R-fl-keyword:fun-defs . t)
        (ess-R-fl-keyword:assign-ops . t)
        (ess-R-fl-keyword:%op% . t)
        (ess-fl-keyword:fun-calls . t)
        (ess-fl-keyword:numbers . t)
        (ess-fl-keyword:operators . t)
        (ess-fl-keyword:delimiters . t)
        (ess-fl-keyword:= . t)
        (ess-R-fl-keyword:F&T . t)))
#+end_src
#+name: emailconf
#+begin_src elisp
;;;;;;;;;;;
;; EMAIL ;;
;;;;;;;;;;;

(defvar my-mu4e-account-alist
  '(("Private"
     (mu4e-sent-folder "/private/Saved Items")
     (mu4e-drafts-folder "/private/Drafts")
     (user-mail-address "patryk@gronkiewi.cz")
     (smtpmail-default-smtp-server "smtp.purelymail.com")
     (smtpmail-local-domain "purelymail.com")
     (smtpmail-smtp-user "patryk@gronkiewi.cz")
     (smtpmail-smtp-server "smtp.purelymail.com")
     (smtpmail-stream-type starttls)
     (smtpmail-smtp-service 587))
    ("University"
     (mu4e-sent-folder "/university/Saved Items")
     (mu4e-drafts-folder "/university/Drafts")
     (user-mail-address "164157@stud.prz.edu.pl")
     (smtpmail-default-smtp-server "stud.prz.edu.pl")
     (smtpmail-local-domain "stud.prz.edu.pl")
     (smtpmail-smtp-user "164157@stud.prz.edu.pl")
     (smtpmail-smtp-server "stud.prz.edu.pl")
     (smtpmail-stream-type starttls)
     (smtpmail-smtp-service 587))))
(defun my-mu4e-set-account ()
  "Set the account for composing a message."
  (let* ((account
          (if mu4e-compose-parent-message
              (let ((maildir (mu4e-message-field mu4e-compose-parent-message :maildir)))
                (string-match "/\\(.*?\\)/" maildir)
                (match-string 1 maildir))
            (completing-read (format "Compose with account: (%s) "
                                     (mapconcat #'(lambda (var) (car var))
                                                my-mu4e-account-alist "/"))
                             (mapcar #'(lambda (var) (car var)) my-mu4e-account-alist)
                             nil t nil nil (caar my-mu4e-account-alist))))
         (account-vars (cdr (assoc account my-mu4e-account-alist))))
    (if account-vars
        (mapc #'(lambda (var)
                  (set (car var) (cadr var)))
              account-vars)
      (error "No email account found"))))

;; ask for account when composing mail
(add-hook 'mu4e-compose-pre-hook 'my-mu4e-set-account)

#+end_src
#+name: rss
#+begin_src elisp
(use-package! elfeed-protocol
  :after elfeed
  :config (elfeed-protocol-enable)
  :custom
  (elfeed-use-curl t)
  (elfeed-set-timeout 36000)
  (elfeed-feeds (list
                 (list "fever+https://pg@rss.lab.home"
                       :api-url "https://rss.lab.home/api/fever.php"
                       :use-authinfo t))))
#+end_src
#+name: protoconf
#+begin_src elisp
(use-package! elpher)
#+end_src
#+begin_src elisp :tangle config.el :noweb yes
<<identity>>
<<fonts>>
<<theming>>
<<calendar>>
<<orgconf>>
<<writingconf>>
<<projects>>
<<rconf>>
<<emailconf>>
<<protoconf>>
<<rss>>
#+end_src
